// Required modules
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import fs from 'fs/promises'; // For saving the image file
import path from 'path';      // For handling file paths

// --- Configuration ---
// –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –±–µ–∑–æ–ø–∞—Å–Ω–æ! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
// –û—Å—Ç–∞–≤–ª—è—é –≤–∞—à –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ù–ê–°–¢–û–Ø–©–ò–ô –ö–õ–Æ–ß –¢–ê–ö –í –†–ï–ê–õ–¨–ù–´–• –ü–†–û–ï–ö–¢–ê–•!
const API_KEY = "AIzaSyBCURZf72ZWwMN2SHZ7XCQoNgExV4WMX8E";
if (API_KEY === "AIzaSyBCURZf72ZWwMN2SHZ7XCQoNgExV4WMX8E") {
    console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä API –∫–ª—é—á–∞. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è.");
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π
    // process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
const safetySettings = [
    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
];

// Initialize Gemini client
const genAI = new GoogleGenerativeAI(API_KEY);

// –ú–æ–¥–µ–ª–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∫ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ Python —Å–∫—Ä–∏–ø—Ç–µ:
// Python: gemini-2.0-flash-exp-image-generation -> JS: gemini-1.5-flash (–±–ª–∏–∂–∞–π—à–∞—è –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
const textModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
// Python: imagen-3.0-generate-002 -> JS: imagen-3 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –¥–ª—è Imagen 3 –≤ SDK)
const imageModel = genAI.getGenerativeModel({ model: "imagen-3", safetySettings }); // –î–æ–±–∞–≤–ª—è–µ–º safetySettings –∫ –º–æ–¥–µ–ª–∏ Imagen


// --- Helper Functions --- (–û—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ)

/**
 * Extracts text content from a Gemini API response.
 * @param {GenerateContentResponse} response - The API response object.
 * @returns {string} - The extracted text.
 * @throws {Error} If response is invalid or lacks text.
 */
function extractText(response) {
    try {
        // Check for safety ratings first - might indicate blocked content
        if (response.response.promptFeedback?.blockReason) {
            throw new Error(`Request blocked due to: ${response.response.promptFeedback.blockReason}`);
        }
        if (!response.response.candidates?.[0]?.content?.parts?.[0]?.text) {
             console.error("Invalid response structure or missing text:", JSON.stringify(response, null, 2));
            throw new Error("Failed to extract text from API response.");
        }
        return response.response.candidates[0].content.parts[0].text.trim();
    } catch (error) {
        console.error("Error extracting text:", error);
        console.error("Full API Response on Error:", JSON.stringify(response, null, 2));
        throw error;
    }
}

/**
 * Extracts image data (Base64) from a Gemini API response.
 * @param {GenerateContentResponse} response - The API response object.
 * @returns {{mimeType: string, data: string}} - Object with mimeType and Base64 image data.
 * @throws {Error} If response is invalid or lacks image data.
 */
function extractImageData(response) {
    try {
        if (response.response.promptFeedback?.blockReason) {
             throw new Error(`Request blocked due to: ${response.response.promptFeedback.blockReason}`);
        }
        const imagePart = response.response.candidates?.[0]?.content?.parts?.find(part => part.inlineData);
        if (!imagePart || !imagePart.inlineData.data) {
             console.error("Invalid response structure or missing image data:", JSON.stringify(response, null, 2));
            throw new Error("Failed to extract image data from API response.");
        }
        return {
            mimeType: imagePart.inlineData.mimeType,
            data: imagePart.inlineData.data
        };
    } catch (error) {
        console.error("Error extracting image data:", error);
        console.error("Full API Response on Error:", JSON.stringify(response, null, 2));
        throw error;
    }
}

// --- Core Logic Functions --- (–û—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ)

/**
 * Analyze and optimize the original prompt using a text model.
 * @param {string} originalPrompt - User's original text prompt.
 * @returns {Promise<string>} - The enhanced prompt.
 */
async function analyzeAndEnhancePrompt(originalPrompt) {
    console.log("‚úçÔ∏è  –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...");
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤. –£–ª—É—á—à–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
1. –î–æ–±–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
2. –£—Ç–æ—á–Ω–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
3. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
4. –û–±–µ—Å–ø–µ—á—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${originalPrompt}"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.`;

    try {
        const result = await textModel.generateContent(prompt);
        return extractText(result);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:", error);
        console.warn("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è.");
        return originalPrompt;
    }
}

/**
 * Simulate diffusion process: conceptual exploration -> refinement.
 * Identifies concepts to avoid and elements to include.
 * @param {string} prompt - The (usually enhanced) prompt.
 * @returns {Promise<object>} - Object with 'negativeConcepts' and 'positiveDetails' arrays.
 */
async function simulateDiffusion(prompt) {
    console.log("üß™ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–∏—Ñ—Ñ—É–∑–∏–∏...");
    try {
        // –§–∞–∑–∞ 1: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –ù–ï –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å
        const negativePrompt = `–ü–µ—Ä–µ—á–∏—Å–ª–∏ 3 –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–∞/—ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —ç—Ç–æ–º—É –ø—Ä–æ–º–ø—Ç—É: "${prompt}"\n\n–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –∫–∞–∫: –ö–æ–Ω—Ü–µ–ø—Ç 1 | –ö–æ–Ω—Ü–µ–ø—Ç 2 | –ö–æ–Ω—Ü–µ–ø—Ç 3`;
        const negativeResult = await textModel.generateContent(negativePrompt);
        const negativeConceptsText = extractText(negativeResult);
        const negativeConcepts = negativeConceptsText.split('|').map(s => s.trim()).filter(Boolean);

        // –§–∞–∑–∞ 2: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        const positivePrompt = `–ò–∑–≤–ª–µ–∫–∏ 5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –ø–æ—è–≤–∏—Ç—å—Å—è –∏–ª–∏ –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: "${prompt}"\n\n–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –∫–∞–∫: –≠–ª–µ–º–µ–Ω—Ç 1 | –≠–ª–µ–º–µ–Ω—Ç 2 | –≠–ª–µ–º–µ–Ω—Ç 3 | –≠–ª–µ–º–µ–Ω—Ç 4 | –≠–ª–µ–º–µ–Ω—Ç 5`;
        const positiveResult = await textModel.generateContent(positivePrompt);
        const positiveDetailsText = extractText(positiveResult);
        const positiveDetails = positiveDetailsText.split('|').map(s => s.trim()).filter(Boolean);

        if (negativeConcepts.length === 0) console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã.");
        if (positiveDetails.length === 0) console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.");

        return {
            negativeConcepts: negativeConcepts.length > 0 ? negativeConcepts : ["—Ä–∞–∑–º—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", "—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "–ø–ª–æ—Ö–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è"],
            positiveDetails: positiveDetails.length > 0 ? positiveDetails : ["—á–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å", "—Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ", "–≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞", "—è—Å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è"]
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∏—Ñ—Ñ—É–∑–∏–∏:", error);
        console.warn("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏—Ñ—Ñ—É–∑–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏.");
        return {
             negativeConcepts: ["—Ä–∞–∑–º—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", "—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "–≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏"],
             positiveDetails: ["—á–µ—Ç–∫–∏–π —Ñ–æ–∫—É—Å", "—è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞", "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã", "—Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ", "—è—Å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è"]
        };
    }
}

/**
 * Generate image with diffusion constraints and potentially iterative feedback.
 * @param {string} prompt - The current working prompt.
 * @param {object} diffusionData - Contains 'negativeConcepts' and 'positiveDetails'.
 * @param {object|null} previousImageData - Optional { mimeType: string, data: string } of the previous image (Base64).
 * @returns {Promise<object>} - Object with { mimeType: string, data: string } for the generated image (Base64).
 */
async function generateImageWithCritique(prompt, diffusionData, previousImageData = null) {
    console.log("üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");

    const generationPrompt = `
${prompt}

**–°—Ç—Ä–æ–≥–∏–µ —É–∫–∞–∑–∞–Ω–∏—è:**
*   **–ò–ó–ë–ï–ì–ê–¢–¨:** ${diffusionData.negativeConcepts.join(", ")}.
*   **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ò–¢–¨:** ${diffusionData.positiveDetails.join(", ")}.
*   –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ–∫—Å—Ç—É—Ä –∏ –æ—Å–≤–µ—â–µ–Ω–∏—è.
*   –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–µ–∞–ª–∏–∑–º –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–ª—å —Ñ—ç–Ω—Ç–µ–∑–∏).
*   –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å (–µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–æ–µ).

${previousImageData ? "**–ó–∞–º–µ—Ç–∫–∞ –ø–æ —É—Ç–æ—á–Ω–µ–Ω–∏—é:** –£–ª—É—á—à–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–ø—ã—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏–∫–∏." : "**–ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.**"}
`;

    const parts = [ { text: generationPrompt } ];

    if (previousImageData) {
        console.log("   ...–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.");
        parts.push({
            inlineData: {
                mimeType: previousImageData.mimeType,
                data: previousImageData.data
            }
        });
    }

    try {
        const result = await imageModel.generateContent({ contents: [{ parts }] });
        return extractImageData(result);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
    }
}

/**
 * Generate detailed artistic critique of the image based on the prompt.
 * @param {object} imageData - { mimeType: string, data: string } of the image (Base64).
 * @param {string} originalPrompt - The prompt the image was *intended* to match.
 * @returns {Promise<string>} - The critique text.
 */
async function getImageCritique(imageData, originalPrompt) {
    console.log("üßê –ö—Ä–∏—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");
    const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç-–∫—Ä–∏—Ç–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫ –ò–ò-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:
–ü—Ä–æ–º–ø—Ç: "${originalPrompt}"

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –∫—Ä–∏—Ç–∏–∫—É, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é *—Ç–æ–ª—å–∫–æ* –Ω–∞ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—á–∞–Ω–∏—è—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤ *—Å–ª–µ–¥—É—é—â–µ–π* –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ó–∞—Ç—Ä–æ–Ω—å —ç—Ç–∏ –ø—É–Ω–∫—Ç—ã:
1.  **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–º–ø—Ç—É:** –ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç *–∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º* –ø—Ä–æ–º–ø—Ç–∞? –ß—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ?
2.  **–†–µ–∞–ª–∏–∑–º/–ü—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–∏–µ:** –û–ø—Ä–µ–¥–µ–ª–∏ –ª—é–±—ã–µ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–¥—É–º–∞–Ω–æ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–º).
3.  **–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –≠—Å—Ç–µ—Ç–∏–∫–∞:** –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –æ—Å–≤–µ—â–µ–Ω–∏—è, –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.
4.  **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:** –û—Ç–º–µ—Ç—å –ª—é–±—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ò–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏—à–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏, –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–º—ã—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏).

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 3-5 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.`;

    const parts = [
        { text: prompt },
        { inlineData: { mimeType: imageData.mimeType, data: imageData.data } }
    ];

    try {
        const result = await textModel.generateContent({ contents: [{ parts }] });
        return extractText(result);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        return "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–º–ø—Ç–æ–º.";
    }
}

/**
 * Refine the prompt based on critique using a text model.
 * @param {string} currentPrompt - The prompt used for the last generation.
 * @param {string} critique - The critique received for the last image.
 * @returns {Promise<string>} - The new, improved prompt.
 */
async function updatePromptFromCritique(currentPrompt, critique) {
    console.log("‚úçÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏–∫–∏...");
    const prompt = `–£–ª—É—á—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å *—Ç–æ–ª—å–∫–æ* –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∫—Ä–∏—Ç–∏–∫–µ. –¢–æ–Ω–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å *—Å–ª–µ–¥—É—é—â—É—é* –ø–æ–ø—ã—Ç–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –ø—É–Ω–∫—Ç—ã –∫—Ä–∏—Ç–∏–∫–∏.

–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç: "${currentPrompt}"

–ö—Ä–∏—Ç–∏–∫–∞: "${critique}"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–π, —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.`;

    try {
        const result = await textModel.generateContent(prompt);
        return extractText(result);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ –∫—Ä–∏—Ç–∏–∫–µ:", error);
        console.warn("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–æ–º–ø—Ç—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.");
        return currentPrompt;
    }
}

/**
 * Main function to generate an image with enhanced prompt and iterative critique.
 * @param {string} initialUserPrompt - User's original text prompt.
 * @param {number} iterations - Number of improvement cycles (default: 3).
 * @returns {Promise<object>} - { mimeType: string, data: string } of the final optimized image (Base64).
 */
async function generateEnhancedImage(initialUserPrompt, iterations = 3) {
    if (!initialUserPrompt) {
        throw new Error("–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    }
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: "${initialUserPrompt}" —Å ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏.`);

    let currentPrompt = await analyzeAndEnhancePrompt(initialUserPrompt);
    console.log(`‚ú® –ù–∞—á–∞–ª—å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${currentPrompt}`);

    console.log("üîç –°–∏–º—É–ª—è—Ü–∏—è —Ñ–∞–∑—ã –¥–∏—Ñ—Ñ—É–∑–∏–∏: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤...");
    const diffusionData = await simulateDiffusion(currentPrompt);
    console.log(`   –ö–æ–Ω—Ü–µ–ø—Ç—ã –¥–ª—è –∏–∑–±–µ–≥–∞–Ω–∏—è: ${diffusionData.negativeConcepts.join(', ')}`);
    console.log(`   –î–µ—Ç–∞–ª–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è: ${diffusionData.positiveDetails.join(', ')}`);

    let bestImageData = null;
    for (let i = 0; i < iterations; i++) {
        console.log(`\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}/${iterations}`);

        try {
             const currentImageData = await generateImageWithCritique(
                currentPrompt,
                diffusionData,
                bestImageData
            );

            if (i < iterations - 1) {
                const critique = await getImageCritique(currentImageData, currentPrompt);
                console.log(`üìù –ö—Ä–∏—Ç–∏–∫–∞: ${critique}`);
                 currentPrompt = await updatePromptFromCritique(currentPrompt, critique);
                 console.log(`‚ú® –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: ${currentPrompt}`);
            } else {
                 console.log("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–ª—å–Ω–µ–π—à–∞—è –∫—Ä–∏—Ç–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
            }
             bestImageData = currentImageData;

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${i + 1}:`, error);
             if (error.message.includes("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")) {
                 console.error("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.");
                 throw error;
             }
             console.warn("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—É—â–µ–π.");
             if (!bestImageData && i === 0) { // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                 throw new Error("–ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
             }
        }
        // Optional delay
        // await new Promise(resolve => setTimeout(resolve, 1000));
    }

    if (!bestImageData) {
         throw new Error("–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
    }

    return bestImageData;
}

// --- Example Usage ---
async function main() {
    const userPrompt = "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞ –æ—Ä–±–∏—Ç–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –≤—Ä–∞—â–∞—é—â–µ–π—Å—è, —è—Ä–∫–æ —Å–≤–µ—Ç—è—â–µ–π—Å—è –Ω–µ–π—Ç—Ä–æ–Ω–Ω–æ–π –∑–≤–µ–∑–¥–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, –≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"; // –ü—Ä–æ–º–ø—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    const outputFilename = "enhanced_spaceship.png";
    const outputDir = "./output"; // –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    try {
        await fs.mkdir(outputDir, { recursive: true });
        const outputFilePath = path.join(outputDir, outputFilename);

        const finalImageData = await generateEnhancedImage(userPrompt, 3); // 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏

        console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ${outputFilePath}...`);
        const imageBuffer = Buffer.from(finalImageData.data, 'base64');
        await fs.writeFile(outputFilePath, imageBuffer);

        console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");

    } catch (error) {
        console.error("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
        process.exitCode = 1;
    }
}

// Run the main function
main();